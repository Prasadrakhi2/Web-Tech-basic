1. css => Cascasding style sheet
2. type  =>  1. inline css  2. internal css  3. external css
3. css selectors  => 1.class(.)   2.id(#)     3.tag

* default font size = 16px
* 1em = 16px  or(dipends on perent font px ex; we pass 10px in main div then '1em = 10px')
* body-tag  = take "8px" margin by itself




///***************** //

use 
*{
    padding : 0px;
    margin: 0px;
}







//********** box  *********************//
1. float  => colum wise direction (either left or right) , if already in left than adjest after that ex. we sit in the class room




//************* text ****************//
1. color
2. font-size
3. text-align   => (left, right, center, justify)
4. font-wight   => (bold / bolder the letter)
5. font-style   => (like italic etc..)
6. text-decoretion  => (underline, cross the text etc..)
7. text- transform  => (upercase, lowercase, capatilize i.e. every first letter is capital)
8. word-spacing    =>  (give the space between words)    (or we can use '&nbsp' in between html wods)
9.  letter-spacing
10. font-family



//************  box-model **************//
1. border: size type color    =>  five border in all side as per our direction (but it incress the height & width of main div  , so we decrice the size of height and width of main div as per the bored size)
2. border-left , border-right,.....


3.Margin  => give the gap from outside
3. margin : ;   (use auto for take in middle) (also can be "margin: T,R,B,L;" i.e=>clock wise   or "margin: 10px 40px;"  which 10px=> top & bottom  and 40px for right-left  )  (decress the parent dive size as per the margin otherwise content shift in bottom)
so use (margin: auto;) it shift div from left and right autometicaly

4. padding => gap from inside(i.e adjust the containt) (but decreass the 'height' and 'width' as per the padding)




//*********** background images *********************//
1. background : ; (both can give either color or image)
2. background-image: url();
3. background-repeat: ;  (no-repeat , repeat-x, repeat-y)
4. background-position: ; (center, top , left , left center , right, etc...)
5. background-size: ; (cover = cover whole part)

**** cover always come after placing the image ******

6. background-attachment: fixed; ( give the parelex effect i.e the image will fix and other thing eill scroll in it)





//**************** shadow ****************//
text =>

1. text-shadow: x-offset y-offset blur color;  (x-offset , y-offset, blur, color)


box =>

1.   box-shadow: x-offset y-offset blur  all-direction color;  (if we use "inset" and then property so shadow comes inside)
2.box-shadow: offsetX offsetY blurRadius spreadRadius color;




//Parents properties

///*********  Flex - box ************************//
* it is a "parent" property which take all element either x-axis in web and y-axis in phone
* if total size of 'childs' are more to bhi 'parent' adjest all child in same line 

1. display : flex;

* for give the lengt/adjest according to us use
1.  flex-wrap: wrap;
2.flex-direction : ; (row-normaly it is done, colum-it take all items verticaly like in phone)
                         (also - row-reverse, col-reverse)






//*****************  *********//
//when "display : flex; " is given then 'justify content' & 'align items' & 'gap' will work 

if flex-direction : row; then
1. justify-containt => work in width / adjust things in row and
   align-items => work in height / adjust the coloum things

if flex-decoretion : coloum; then
1. justify-containt => work in height / adjust things in colum and
   align-items => work in width / adjust the row things

// if we want to place 1 box in left and 1 in right / give the same space to all use (see task -6)
1. justify-containt : space-between;

1. justify-containt : space-around;  //giv the equal space in left and right to the box


//align-items
use (space-between, flex-start, flex-end)

//gap : 2px;   => give the space between child directly




//**************** Psudo classes and Psudo element *********//
it target direcly to the tag of the class - task_7




///*************** Hover ****//
chang ther property when we point the curcer on the element

// transition => give the time that how much time take on hover

<link href="https://fonts.googleapis.com/css2?family=Roboto:ital,wght@0,100;0,300;0,400;0,500;0,700;0,900;1,100;1,300;1,400;1,500;1,700;1,900&display=swap" rel="stylesheet">










///***********  color *********************///
Step 47=>
You may already be familiar with decimal, or base 10 values, which go from 0 - 9. Hexadecimal, or base 16 values, go from 0 - 9, then A - F:

Example Code
0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F
With hex colors, 00 is 0% of that color, and FF is 100%. So #00FF00 translates to 0% red, 100% green, and 0% blue, and is the same as rgb(0, 255, 0).

Lower the intensity of green by setting the green value of the hex color to 7F.


step 48=>
The HSL color model, or hue, saturation, and lightness, is another way to represent colors.

The CSS hsl function accepts 3 values: a number from 0 to 360 for hue, a percentage from 0 to 100 for saturation, and a percentage from 0 to 100 for lightness.

If you imagine a color wheel, the hue red is at 0 degrees, green is at 120 degrees, and blue is at 240 degrees.

Saturation is the intensity of a color from 0%, or gray, to 100% for pure color. You must add the percent sign % to the saturation and lightness values.

Lightness is how bright a color appears, from 0%, or complete black, to 100%, complete white, with 50% being neutral.

In the .blue CSS rule, use the hsl function to change the background-color property to pure blue. Set the hue to 240, the saturation to 100%, and the lightness to 50%.

"background-color: rgb(0, 0, 0);"



Step 49
You've learned a few ways to set flat colors in CSS, but you can also use a color transition, or gradient, on an element.

A gradient is when one color transitions into another. The CSS linear-gradient function lets you control the direction of the transition along a line, and which colors are used.

One thing to remember is that the linear-gradient function actually creates an image element, and is usually paired with the background property which can accept an image as a value.

In the .red CSS rule, change the background-color property to background.

"linear-gradient(gradientDirection, color1, color2, ...);"


** You won't see gradient yet because the linear-gradient function needs at least two color arguments to work. 180 degree line, by default.
"background: linear-gradient(90deg, rgb(255, 0, 0), rgb(0, 255, 0));"

" background: linear-gradient(90deg, rgb(255, 0, 0) 75%, rgb(0, 255, 0), rgb(0, 0, 255));"



Step 73
Opacity describes how opaque, or non-transparent, something is. For example, a solid wall is opaque, and no light can pass through. But a drinking glass is much more transparent, and you can see through the glass to the other side.

With the CSS opacity property, you can control how opaque or transparent an element is. With the value 0, or 0%, the element will be completely transparent, and at 1.0, or 100%, the element will be completely opaque like it is by default.

In the .sleeve CSS rule, set the opacity property to 0.5.

"opacity: 0.5;"

he rgba function works just like the rgb function, but takes one more number from 0 to 1.0 for the alpha channel:

Example Code

"rgba(redValue, greenValue, blueValue, alphaValue);"
"background-color: rgba(255, 255, 255, 50%);"